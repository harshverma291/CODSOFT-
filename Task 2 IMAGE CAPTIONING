import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Input
from nltk.tokenize import word_tokenize
from collections import defaultdict

resnet_model = ResNet50(weights='imagenet', include_top=False, pooling='avg')

def extract_features(image_path):
    image = load_img(image_path, target_size=(224, 224))
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    features = resnet_model.predict(image)
    return features

def preprocess_captions(captions):
    tokenizer = defaultdict(int)
    for caption in captions:
        for word in word_tokenize(caption.lower()):
            tokenizer[word] += 1
    return tokenizer

def create_captioning_model(vocab_size, max_length):
    input1 = Input(shape=(2048,))
    fe1 = Dense(256, activation='relu')(input1)
    
    input2 = Input(shape=(max_length,))
    se1 = Embedding(vocab_size, 256, mask_zero=True)(input2)
    se2 = LSTM(256)(se1)
    
    decoder1 = tf.keras.layers.add([fe1, se2])
    decoder2 = Dense(256, activation='relu')(decoder1)
    output = Dense(vocab_size, activation='softmax')(decoder2)
    
    model = Model(inputs=[input1, input2], outputs=output)
    model.compile(loss='categorical_crossentropy', optimizer='adam')
    return model

# Example usage
image_path = 'path_to_your_image.jpg'
features = extract_features(image_path)
# Assume captions and vocab_size, max_length are defined
# model = create_captioning_model(vocab_size, max_length)
# Generate captions using the model (not shown here)
