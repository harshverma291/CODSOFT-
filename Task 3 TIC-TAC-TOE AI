import math

EMPTY = ' '
PLAYER_X = 'X'
PLAYER_O = 'O'

class TicTacToe:
    def __init__(self):
        self.board = [[EMPTY for _ in range(3)] for _ in range(3)]
        self.current_player = PLAYER_X

    def print_board(self):
        for row in self.board:
            print('|'.join(row))
            print('-' * 5)

    def is_winner(self, player):
        for row in range(3):
            if all([cell == player for cell in self.board[row]]):
                return True
        for col in range(3):
            if all([self.board[row][col] == player for row in range(3)]):
                return True
        if all([self.board[i][i] == player for i in range(3)]) or \
           all([self.board[i][2 - i] == player for i in range(3)]):
            return True
        return False

    def is_full(self):
        return all([cell != EMPTY for row in self.board for cell in row])

    def minimax(self, depth, is_maximizing):
        if self.is_winner(PLAYER_O):
            return 1  # AI wins
        if self.is_winner(PLAYER_X):
            return -1  # Human wins
        if self.is_full():
            return 0  # Draw

        if is_maximizing:
            best_score = -math.inf
            for row in range(3):
                for col in range(3):
                    if self.board[row][col] == EMPTY:
                        self.board[row][col] = PLAYER_O
                        score = self.minimax(depth + 1, False)
                        self.board[row][col] = EMPTY
                        best_score = max(score, best_score)
            return best_score
        else:
            best_score = math.inf
            for row in range(3):
                for col in range(3):
                    if self.board[row][col] == EMPTY:
                        self.board[row][col] = PLAYER_X
                        score = self.minimax(depth + 1, True)
                        self.board[row][col] = EMPTY
                        best_score = min(score, best_score)
            return best_score

    def best_move(self):
        best_score = -math.inf
        move = (-1, -1)
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == EMPTY:
                    self.board[row][col] = PLAYER_O
                    score = self.minimax(0, False)
                    self.board[row][col] = EMPTY
                    if score > best_score:
                        best_score = score
                        move = (row, col)
        return move

    def play(self):
        while True:
            self.print_board()
            if self.current_player == PLAYER_X:
                row, col = map(int, input("Enter your move (row and column): ").split())
                if self.board[row][col] == EMPTY:
                    self.board[row][col] = PLAYER_X
                    if self.is_winner(PLAYER_X):
                        self.print_board()
                        print("You win!")
                        break
                    self.current_player = PLAYER_O
                else:
                    print("Invalid move. Try again.")
            else:
                print("AI is making a move...")
                row, col = self.best_move()
                self.board[row][col] = PLAYER_O
                if self.is_winner(PLAYER_O):
                    self.print_board()
                    print("AI wins!")
                    break
                self.current_player = PLAYER_X

            if self.is_full():
                self.print_board()
                print("It's a draw!")
                break

if __name__ == "__main__":
    game = TicTacToe()
    game.play()
